datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
  inventoryItems         InventoryItem[]
  reservations           Reservation[]
  partnerAccount PartnerAccount?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model PartnerAccount {
  
  firstName         String @map("first_name")
  lastName          String @map("last_name")
  email             String
  phoneNumber       String @map("phone_number")
  company           String
  websiteUrl        String? @map("website_url")
  address           String
  bankAccount       String? @map("bank_account")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  userId            String @unique @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId])

}

model Site {

  id                String          @unique @id @default(cuid())

  userId            String          @map("user_id")
  name              String
  locationLat       String          @map("location_lat")
  locationLng       String          @map("location_lng")
  coords            Unsupported("geometry(Point, 4326)")?

  price             Float?
  image             String?
  imageWidth        Int?            @map("image_width")
  imageHeight       Int?            @map("image_height")

  description       String?

  services          String[]        @default([])

  inventoryItems         InventoryItem[]
  workingHours           SiteWorkingHours[]
  reservations           Reservation[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([coords], name: "site_coords_idx", type: Gist)
 
}

model SiteWorkingHours {

  id                String          @unique @id @default(cuid())
  siteId            String          @map("site_id")

  day               Int
  openTime          DateTime          @map("open_time")
  closeTime         DateTime          @map("close_time")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

}

model InventoryItem {               @map("inventory_item")

  id                String          @unique @id @default(cuid())

  userId            String          @map("user_id")
  siteId            String          @map("site_id")
  number            Int
  locationLat       String          @map("location_lat")
  locationLng       String          @map("location_lng")
  status            String
  notes             String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reservations           Reservation[]
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
 
}

model Reservation {

  id                String          @unique @id @default(cuid())

  userId            String          @map("user_id")
  siteId            String          @map("site_id")
  itemId            String?         @map("item_id")

  from              DateTime          @map("from")
  to                DateTime          @map("to")

  status            String @default("pending")
  type              String @default("hours")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  item InventoryItem? @relation(fields: [itemId], references: [id], onDelete: Cascade)
 
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}